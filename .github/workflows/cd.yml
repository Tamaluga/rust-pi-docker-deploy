name: CD - Deploy to Raspberry Pi

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy without version change'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      app_name: ${{ steps.app-info.outputs.APP_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Build and test code
      run: |
        cargo build --release --verbose
        cargo test --verbose

    - name: Extract version and name from Cargo.toml
      id: app-info
      run: |
        name=$(awk '/\[package\]/ {found=1} found && /^name *=/ {gsub(/"/, "", $3); print $3; exit}' Cargo.toml)
        version=$(awk '/\[package\]/ {found=1} found && /^version *=/ {gsub(/"/, "", $3); print $3; exit}' Cargo.toml)
        echo "APP_NAME=$name" >> "$GITHUB_OUTPUT"
        echo "APP_VERSION=$version" >> "$GITHUB_OUTPUT"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v6
      with:
        push: true
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max
          *.context=.
          *.platform=linux/arm/v8
          *.tags=${{ secrets.DOCKER_USERNAME }}/${{ steps.app-info.outputs.APP_NAME }}:${{ steps.app-info.outputs.APP_VERSION }}
          *.args.BUILD=release

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.RASPI_PRIVATE_SSH_KEY }}" > ~/.ssh/raspi_key
        chmod 600 ~/.ssh/raspi_key

    - name: Copy docker-compose.yml to raspi
      run: scp -i ~/.ssh/raspi_key -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.RASPI_USER }}@${{ secrets.RASPI_IP }}:~/${{ needs.build.outputs.app_name }}/

    - name: Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.RASPI_IP }}
        username: ${{ secrets.RASPI_USER }}
        key: ${{ secrets.RASPI_PRIVATE_SSH_KEY }}
        port: 22
        command_timeout: 10m
        script: |
          cd ~/${{ needs.build.outputs.app_name }}/
          docker compose down
          docker compose pull
          docker compose up -d
